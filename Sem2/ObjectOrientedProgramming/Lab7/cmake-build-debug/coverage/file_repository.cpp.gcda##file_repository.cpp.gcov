        -:    0:Source:C:/Users/Dan/Desktop/Uni/OOP/Lab7/repository/file_repository.cpp
        -:    0:Graph:C:\Users\Dan\Desktop\Uni\OOP\Lab7\cmake-build-debug\CMakeFiles\Lab7.dir\repository\file_repository.cpp.gcno
        -:    0:Data:C:\Users\Dan\Desktop\Uni\OOP\Lab7\cmake-build-debug\CMakeFiles\Lab7.dir\repository\file_repository.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "file_repository.h"
        -:    2:#include <algorithm>
        -:    3:#include <iostream>
        -:    4:#include <queue>
        -:    5:
       11:    6:FileRepository::FileRepository(const std::string& file_name) {
       11:    6-block  0
       11:    6-block  1
    $$$$$:    6-block  2
    $$$$$:    6-block  3
    $$$$$:    6-block  4
    $$$$$:    6-block  5
       11:    7:    file_name_ = file_name;
       11:    7-block  0
       11:    8:    index_ = 0;
       11:    9:}
       11:    9-block  0
        -:   10:
       19:   11:void FileRepository::add_guardian_statue(const GuardianStatue &guardian_statue) {
       38:   12:    std::vector<GuardianStatue> statues = read();
       19:   12-block  0
       18:   12-block  1
        1:   12-block  2
       20:   13:    for (const auto& statue : statues) {
       19:   13-block  0
       20:   13-block  1
        2:   13-block  2
        1:   13-block  3
        2:   14:        if (statue == guardian_statue) {
        2:   14-block  0
        1:   15:            throw Exception("Guardian statue exists.");
        1:   15-block  0
        1:   15-block  1
        1:   15-block  2
    $$$$$:   15-block  3
    $$$$$:   15-block  4
    $$$$$:   15-block  5
    $$$$$:   15-block  6
    $$$$$:   15-block  7
        -:   16:        }
        -:   17:    }
       18:   18:    statues.emplace_back(guardian_statue);
       18:   18-block  0
       18:   19:    write(statues);
       18:   19-block  0
       18:   20:}
        -:   21:
        3:   22:void FileRepository::delete_guardian_statue(const std::string& power_word_name) {
        6:   23:    std::vector<GuardianStatue> statues = read();
        3:   23-block  0
        2:   23-block  1
        1:   23-block  2
        -:   24:    auto position = std::find_if(statues.begin(), statues.end(), [power_word_name](const GuardianStatue& statue) {
        -:   25:       return statue.get_power_word_name() == power_word_name;
        3:   26:    });
        3:   26-block  0
        3:   26-block  1
        3:   26-block  2
    $$$$$:   26-block  3
    $$$$$:   26-block  4
        3:   27:    if (position == statues.end()) {
        1:   28:        throw Exception("Guardian statue doesn't exist.");
        1:   28-block  0
        1:   28-block  1
        1:   28-block  2
    $$$$$:   28-block  3
    $$$$$:   28-block  4
    $$$$$:   28-block  5
    $$$$$:   28-block  6
    $$$$$:   28-block  7
        -:   29:    }
        2:   30:    statues.erase(position);
        2:   30-block  0
    $$$$$:   30-block  1
        2:   31:    write(statues);
        2:   31-block  0
        2:   32:}
        -:   33:
        3:   34:void FileRepository::update_guardian_statue(const GuardianStatue &new_guardian_statue) {
        6:   35:    std::vector<GuardianStatue> statues = read();
        3:   35-block  0
        2:   35-block  1
        1:   35-block  2
        3:   36:    auto exists = false;
        5:   37:    for (auto& statue : statues) {
        3:   37-block  0
        5:   37-block  1
        2:   37-block  2
        2:   37-block  3
        2:   38:        if (statue.get_power_word_name() == new_guardian_statue.get_power_word_name()) {
        2:   38-block  0
        2:   38-block  1
        2:   39:            statue.set_material(new_guardian_statue.get_material());
        2:   39-block  0
        2:   39-block  1
        2:   40:            statue.set_age(new_guardian_statue.get_age());
        2:   40-block  0
        2:   40-block  1
        2:   41:            statue.set_corporeal_form(new_guardian_statue.get_corporeal_form());
        2:   41-block  0
        2:   41-block  1
        2:   42:            exists = true;
        2:   42-block  0
        -:   43:        }
        -:   44:    }
        3:   45:    if (!exists) {
        3:   45-block  0
        1:   46:        throw Exception("Guardian statue doesn't exist.");
        1:   46-block  0
        1:   46-block  1
        1:   46-block  2
    $$$$$:   46-block  3
    $$$$$:   46-block  4
    $$$$$:   46-block  5
    $$$$$:   46-block  6
    $$$$$:   46-block  7
        -:   47:    }
        2:   48:    write(statues);
        2:   48-block  0
        2:   49:}
        -:   50:
        6:   51:std::vector<GuardianStatue> FileRepository::get_all_guardian_statues() {
        6:   52:    return read();
        6:   52-block  0
        -:   53:}
        -:   54:
       39:   55:std::vector<GuardianStatue> FileRepository::read() {
       39:   56:    output.open(file_name_, std::ios::app);
       39:   56-block  0
       39:   57:    output.close();
       39:   57-block  0
       39:   58:    input.open(file_name_);
       39:   58-block  0
       39:   59:    std::vector<GuardianStatue> guardian_statues;
       39:   59-block  0
       78:   60:    GuardianStatue statue{};
       39:   60-block  0
    $$$$$:   60-block  1
       59:   61:    while(input >> statue) {
       59:   61-block  0
       59:   61-block  1
       59:   61-block  2
       20:   61-block  3
       20:   62:        guardian_statues.emplace_back(statue);
       20:   62-block  0
        -:   63:    }
       39:   64:    input.close();
       39:   64-block  0
       78:   65:    return guardian_statues;
       39:   65-block  0
       39:   65-block  1
        -:   66:}
        -:   67:
       22:   68:void FileRepository::write(const std::vector<GuardianStatue>& guardian_statues) {
       22:   69:    output.open(file_name_, std::ios::trunc);
       22:   69-block  0
       43:   70:    for (const auto& statue : guardian_statues) {
       43:   70-block  0
       21:   70-block  1
       21:   70-block  2
       21:   71:        output << statue << std::endl;
       21:   71-block  0
        -:   72:    }
       22:   73:    output.close();
       22:   73-block  0
       22:   74:}
       17:   75:void FileRepository::set_file_name(const std::string& file_name) {
       17:   76:    file_name_ = file_name;
       17:   76-block  0
       17:   77:}
        3:   78:std::string FileRepository::get_file_name() {
        3:   79:    return file_name_;
        3:   79-block  0
        -:   80:}
       15:   81:FileRepository::FileRepository() {
       15:   81-block  0
       15:   81-block  1
    $$$$$:   81-block  2
    $$$$$:   81-block  3
    $$$$$:   81-block  4
    $$$$$:   81-block  5
       15:   82:    file_name_ = "";
       15:   82-block  0
       15:   83:    index_ = 0;
       15:   84:}
       15:   84-block  0
        5:   85:GuardianStatue FileRepository::next() {
       10:   86:    std::vector<GuardianStatue> statues = read();
        5:   86-block  0
        5:   86-block  1
    $$$$$:   86-block  2
        5:   87:    if (index_ == statues.size() - 1) {
        5:   87-block  0
        4:   88:        index_ = 0;
        4:   88-block  0
        -:   89:    }
       10:   90:    return statues.at(index_++);
        5:   90-block  0
        5:   90-block  1
        5:   90-block  2
        5:   90-block  3
        -:   91:
        -:   92:}
        3:   93:void FileRepository::save() {
        6:   94:    std::vector<GuardianStatue> statues = read();
        3:   94-block  0
        2:   94-block  1
        1:   94-block  2
        3:   95:    if (statues.empty()) {
        3:   95-block  0
        1:   96:        throw Exception("There is no statue to be saved.");
        1:   96-block  0
        1:   96-block  1
        1:   96-block  2
    $$$$$:   96-block  3
    $$$$$:   96-block  4
    $$$$$:   96-block  5
    $$$$$:   96-block  6
    $$$$$:   96-block  7
        -:   97:    }
        2:   98:    my_list_.emplace_back(statues.at(index_));
        2:   98-block  0
        2:   98-block  1
        2:   99:}
        2:  100:std::vector<GuardianStatue> FileRepository::get_my_list() {
        2:  101:    return my_list_;
        2:  101-block  0
        -:  102:}
