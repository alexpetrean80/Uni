        -:    0:Source:C:/Users/Dan/Desktop/Uni/OOP/Lab7/ui/ui.cpp
        -:    0:Graph:C:\Users\Dan\Desktop\Uni\OOP\Lab7\cmake-build-debug\CMakeFiles\Lab7.dir\ui\ui.cpp.gcno
        -:    0:Data:C:\Users\Dan\Desktop\Uni\OOP\Lab7\cmake-build-debug\CMakeFiles\Lab7.dir\ui\ui.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#define COMMAND_INDEX 0
        -:    2:#define POWER_WORD_NAME_INDEX 1
        -:    3:#define MODE_INDEX 1
        -:    4:#define MATERIAL_INDEX 2
        -:    5:#define AGE_INDEX 3
        -:    6:#define CORPOREAL_FORM_INDEX 4
        -:    7:#define MODE_COMMAND_SIZE 2
        -:    8:#define ADD_COMMAND_SIZE 5
        -:    9:#define DELETE_COMMAND_SIZE 2
        -:   10:#define UPDATE_COMMAND_SIZE 5
        -:   11:#define LIST_COMMAND_SIZE 1
        -:   12:#define EXIT_COMMAND_SIZE 1
        -:   13:#define MODE_FIRST_LETTER 0
        -:   14:#define SET_FILE_COMMAND_SIZE 2
        -:   15:#define FILE_INDEX 1
        -:   16:#define SAVE_COMMAND_SIZE 1
        -:   17:#define NEXT_COMMAND_SIZE 1
        -:   18:#define MY_LIST_COMMAND_SIZE 1
        -:   19:
        -:   20:#include "ui.h"
        -:   21:
        -:   22:UI::UI() = default;
        -:   23:
        1:   24:void UI::run_console() {
        1:   25:    std::vector<std::string> command;
        1:   25-block  0
    $$$$$:   25-block  1
        -:   26:    while (true) {
       1*:   27:        command = read_command();
        1:   27-block  0
        1:   27-block  1
    %%%%%:   27-block  2
        1:   28:        if (command.at(COMMAND_INDEX) == "mode") {
        1:   28-block  0
    #####:   29:            mode_ui(command);
    %%%%%:   29-block  0
        1:   30:        } else if (command.at(COMMAND_INDEX) == "add") {
        1:   30-block  0
        1:   30-block  1
    #####:   31:            add_ui(command);
    %%%%%:   31-block  0
        1:   32:        } else if (command.at(COMMAND_INDEX) == "delete") {
        1:   32-block  0
        1:   32-block  1
    #####:   33:            delete_ui(command);
    %%%%%:   33-block  0
        1:   34:        } else if (command.at(COMMAND_INDEX) == "update") {
        1:   34-block  0
        1:   34-block  1
    #####:   35:            update_ui(command);
    %%%%%:   35-block  0
        1:   36:        } else if (command.at(COMMAND_INDEX) == "list") {
        1:   36-block  0
        1:   36-block  1
    #####:   37:            list_ui(command);
    %%%%%:   37-block  0
        1:   38:        } else if (command.at(COMMAND_INDEX) == "fileLocation") {
        1:   38-block  0
        1:   38-block  1
    #####:   39:            set_file_ui(command);
    %%%%%:   39-block  0
        1:   40:        } else if (command.at(COMMAND_INDEX) == "save") {
        1:   40-block  0
        1:   40-block  1
    #####:   41:            save_ui(command);
    %%%%%:   41-block  0
        1:   42:        } else if (command.at(COMMAND_INDEX) == "next") {
        1:   42-block  0
        1:   42-block  1
    #####:   43:            next_ui(command);
    %%%%%:   43-block  0
        1:   44:        } else if (command.at(COMMAND_INDEX) == "mylist") {
        1:   44-block  0
        1:   44-block  1
    #####:   45:            my_list_ui(command);
    %%%%%:   45-block  0
        1:   46:        } else if (command.at(COMMAND_INDEX) == "exit") {
        1:   46-block  0
        1:   46-block  1
        1:   47:            if (command.size() == EXIT_COMMAND_SIZE) {
        1:   47-block  0
        2:   48:                return;
        1:   48-block  0
        1:   48-block  1
        -:   49:            } else {
    #####:   50:                std::cout << "Invalid arguments.";
    %%%%%:   50-block  0
        -:   51:            }
        -:   52:        } else {
    #####:   53:            std::cout << "Invalid command.";
    %%%%%:   53-block  0
        -:   54:        }
        -:   55:    }
        -:   56:}
        -:   57:
        1:   58:std::vector<std::string> UI::read_command() {
        1:   59:    std::vector<std::string> command;
        1:   59-block  0
        2:   60:    std::string input, token;
    $$$$$:   60-block  0
    $$$$$:   60-block  1
        1:   61:    std::getline(std::cin, input);
        2:   62:    std::stringstream input_stream(input);
        1:   62-block  0
        1:   62-block  1
    $$$$$:   62-block  2
        1:   63:    std::getline(input_stream, token, ' ');
        1:   63-block  0
        1:   64:    command.push_back(token);
        1:   64-block  0
       1*:   65:    while (std::getline(input_stream, token, ',')) {
        1:   65-block  0
        1:   65-block  1
        1:   65-block  2
    #####:   66:        auto begin = token.find_first_not_of(' ');
    %%%%%:   66-block  0
    #####:   67:        auto end = token.find_last_not_of(' ');
    #####:   68:        auto range = end - begin + 1;
    #####:   69:        command.push_back(token.substr(begin, range));
    %%%%%:   69-block  0
    %%%%%:   69-block  1
    $$$$$:   69-block  2
    $$$$$:   69-block  3
        -:   70:    }
        2:   71:    return command;
        1:   71-block  0
        1:   71-block  1
        -:   72:}
        -:   73:
    #####:   74:void UI::mode_ui(const std::vector<std::string> &command) {
    #####:   75:    if (command.size() == MODE_COMMAND_SIZE) {
    %%%%%:   75-block  0
    #####:   76:        if (command.at(MODE_INDEX).at(MODE_FIRST_LETTER) == 'A' || command.at(MODE_INDEX).at(MODE_FIRST_LETTER) == 'B') {
    %%%%%:   76-block  0
    %%%%%:   76-block  1
    %%%%%:   76-block  2
    %%%%%:   76-block  3
    %%%%%:   76-block  4
    #####:   77:            service_.set_mode(command.at(MODE_INDEX).at(MODE_FIRST_LETTER));
    %%%%%:   77-block  0
        -:   78:        } else {
    #####:   79:            std::cout << "Invalid mode.\n";
    %%%%%:   79-block  0
        -:   80:        }
        -:   81:    } else {
    #####:   82:        std::cout << "Invalid arguments.\n";
    %%%%%:   82-block  0
        -:   83:    }
    #####:   84:}
        -:   85:
    #####:   86:void UI::add_ui(const std::vector<std::string> &command) {
    #####:   87:    if (command.size() == ADD_COMMAND_SIZE) {
    %%%%%:   87-block  0
        -:   88:        try {
    #####:   89:            service_.add_guardian_statue(command.at(POWER_WORD_NAME_INDEX), command.at(MATERIAL_INDEX), std::stoi(command.at(AGE_INDEX)),
    %%%%%:   89-block  0
    %%%%%:   89-block  1
    %%%%%:   89-block  2
    %%%%%:   89-block  3
    #####:   90:                                         command.at(CORPOREAL_FORM_INDEX));
    %%%%%:   90-block  0
    %%%%%:   90-block  1
    =====:   91:        } catch (Exception &exception) {
    $$$$$:   91-block  0
    $$$$$:   91-block  1
    =====:   92:            std::cout << exception.what() << std::endl;
    $$$$$:   92-block  0
    $$$$$:   92-block  1
    $$$$$:   92-block  2
    $$$$$:   92-block  3
    $$$$$:   92-block  4
        -:   93:        }
        -:   94:    } else {
    #####:   95:        std::cout << "Invalid arguments.\n";
    %%%%%:   95-block  0
        -:   96:    }
    #####:   97:}
    %%%%%:   97-block  0
        -:   98:
    #####:   99:void UI::update_ui(const std::vector<std::string> &command) {
    #####:  100:    if (command.size() == UPDATE_COMMAND_SIZE) {
    %%%%%:  100-block  0
        -:  101:        try {
    #####:  102:            service_.update_guardian_statue(command.at(POWER_WORD_NAME_INDEX), command.at(MATERIAL_INDEX),
    %%%%%:  102-block  0
    %%%%%:  102-block  1
    %%%%%:  102-block  2
    #####:  103:                                            std::stoi(command.at(AGE_INDEX)), command.at(CORPOREAL_FORM_INDEX));
    %%%%%:  103-block  0
    %%%%%:  103-block  1
    %%%%%:  103-block  2
    =====:  104:        } catch (Exception &exception) {
    $$$$$:  104-block  0
    $$$$$:  104-block  1
    =====:  105:            std::cout << exception.what() << std::endl;
    $$$$$:  105-block  0
    $$$$$:  105-block  1
    $$$$$:  105-block  2
    $$$$$:  105-block  3
    $$$$$:  105-block  4
        -:  106:        }
        -:  107:    } else {
    #####:  108:        std::cout << "Invalid arguments.\n";
    %%%%%:  108-block  0
        -:  109:    }
    #####:  110:}
    %%%%%:  110-block  0
        -:  111:
    #####:  112:void UI::delete_ui(const std::vector<std::string> &command) {
    #####:  113:    if (command.size() == DELETE_COMMAND_SIZE) {
    %%%%%:  113-block  0
        -:  114:        try {
    #####:  115:            service_.delete_guardian_statue(command.at(POWER_WORD_NAME_INDEX));
    %%%%%:  115-block  0
    %%%%%:  115-block  1
    =====:  116:        } catch (Exception &exception) {
    $$$$$:  116-block  0
    $$$$$:  116-block  1
    =====:  117:            std::cout << exception.what() << std::endl;
    $$$$$:  117-block  0
    $$$$$:  117-block  1
    $$$$$:  117-block  2
    $$$$$:  117-block  3
    $$$$$:  117-block  4
        -:  118:        }
        -:  119:    } else {
    #####:  120:        std::cout << "Invalid arguments.\n";
    %%%%%:  120-block  0
        -:  121:    }
    #####:  122:}
    %%%%%:  122-block  0
        -:  123:
    #####:  124:void UI::list_ui(const std::vector<std::string> &command) {
    #####:  125:    if (command.size() == LIST_COMMAND_SIZE) {
    %%%%%:  125-block  0
        -:  126:        try {
    #####:  127:            auto statues = service_.get_all_statues();
    %%%%%:  127-block  0
    %%%%%:  127-block  1
    $$$$$:  127-block  2
    #####:  128:            for (const auto &statue : statues) {
    %%%%%:  128-block  0
    %%%%%:  128-block  1
    %%%%%:  128-block  2
    %%%%%:  128-block  3
    #####:  129:                std::cout << statue << std::endl;
    %%%%%:  129-block  0
        -:  130:            }
    =====:  131:        } catch (...) {
    $$$$$:  131-block  0
    $$$$$:  131-block  1
    $$$$$:  131-block  2
    =====:  132:            std::cout << "An error has occurred.\n";
        -:  133:        }
        -:  134:    } else {
    #####:  135:        std::cout << "Invalid arguments.\n";
    %%%%%:  135-block  0
        -:  136:    }
    #####:  137:}
    %%%%%:  137-block  0
        -:  138:
    #####:  139:void UI::set_file_ui(const std::vector<std::string> &command) {
    #####:  140:    if (command.size() == SET_FILE_COMMAND_SIZE) {
    %%%%%:  140-block  0
    #####:  141:        service_.set_file(command.at(FILE_INDEX));
    %%%%%:  141-block  0
        -:  142:    } else {
    #####:  143:        std::cout << "Invalid arguments.\n";
    %%%%%:  143-block  0
        -:  144:    }
    #####:  145:}
    #####:  146:void UI::save_ui(const std::vector<std::string> &command) {
    #####:  147:    if (command.size() == SAVE_COMMAND_SIZE) {
    %%%%%:  147-block  0
        -:  148:        try {
    #####:  149:            service_.save();
    %%%%%:  149-block  0
    =====:  150:        } catch (Exception& exception) {
    $$$$$:  150-block  0
    $$$$$:  150-block  1
    =====:  151:            std::cout << exception.what() << std::endl;
    $$$$$:  151-block  0
    $$$$$:  151-block  1
    $$$$$:  151-block  2
    $$$$$:  151-block  3
    $$$$$:  151-block  4
        -:  152:        }
        -:  153:    } else {
    #####:  154:        std::cout << "Invalid arguments.\n";
    %%%%%:  154-block  0
        -:  155:    }
    #####:  156:}
    %%%%%:  156-block  0
    #####:  157:void UI::next_ui(const std::vector<std::string> &command) {
    #####:  158:    if (command.size() == NEXT_COMMAND_SIZE) {
    %%%%%:  158-block  0
        -:  159:        try {
    #####:  160:            std::cout << service_.next();
    %%%%%:  160-block  0
    %%%%%:  160-block  1
    %%%%%:  160-block  2
    $$$$$:  160-block  3
    $$$$$:  160-block  4
    =====:  161:        } catch (Exception& exception) {
    $$$$$:  161-block  0
    $$$$$:  161-block  1
    =====:  162:            std::cout << exception.what() << std::endl;
    $$$$$:  162-block  0
    $$$$$:  162-block  1
    $$$$$:  162-block  2
    $$$$$:  162-block  3
    $$$$$:  162-block  4
        -:  163:        }
        -:  164:    } else {
    #####:  165:        std::cout << "Invalid arguments.\n";
    %%%%%:  165-block  0
        -:  166:    }
    #####:  167:}
    %%%%%:  167-block  0
    #####:  168:void UI::my_list_ui(const std::vector<std::string> &command) {
    #####:  169:    if (command.size() == MY_LIST_COMMAND_SIZE) {
    %%%%%:  169-block  0
        -:  170:        try {
    #####:  171:            auto statues = service_.get_my_list();
    %%%%%:  171-block  0
    %%%%%:  171-block  1
    $$$$$:  171-block  2
    #####:  172:            for (const auto& statue : statues) {
    %%%%%:  172-block  0
    %%%%%:  172-block  1
    %%%%%:  172-block  2
    %%%%%:  172-block  3
    #####:  173:                std::cout << statue << std::endl;
    %%%%%:  173-block  0
        -:  174:            }
    =====:  175:        } catch (Exception& exception) {
    $$$$$:  175-block  0
    $$$$$:  175-block  1
    =====:  176:            std::cout << exception.what() << std::endl;
    $$$$$:  176-block  0
    $$$$$:  176-block  1
    $$$$$:  176-block  2
    $$$$$:  176-block  3
    $$$$$:  176-block  4
        -:  177:        }
        -:  178:    } else {
    #####:  179:        std::cout << "Invalid arguments.\n";
    %%%%%:  179-block  0
        -:  180:    }
    #####:  181:}
    %%%%%:  181-block  0
